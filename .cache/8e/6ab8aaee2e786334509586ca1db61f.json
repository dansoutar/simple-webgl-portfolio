{"id":"shaders/fragment.glsl","dependencies":[{"name":"C:\\Users\\Dan\\Desktop\\dev+design\\__projects\\dev\\simple-webgl-portfolio\\package.json","includedInParent":true,"mtime":1650240941032}],"generated":{"js":"module.exports = \"#define GLSLIFY 1\\nuniform float time;\\nuniform float uProgress;\\nuniform sampler2D uTexture;\\nuniform vec2 uTextureSize;\\n\\nvarying vec2 vUv;\\nvarying vec2 vSize;\\n\\nvec2 getUv(vec2 uv, vec2 textureSize, vec2 quadSize) {\\n  vec2 tempUv = uv - vec2(0.5);\\n\\n  float quadAspect = quadSize.x / quadSize.y;\\n  float textureAspect = textureSize.x / textureSize.y;\\n\\n  if (quadAspect < textureAspect) {\\n    tempUv = tempUv * vec2(quadAspect / textureAspect, 1.0);\\n  } else {\\n    tempUv = tempUv * vec2(1.0, textureAspect / quadAspect );\\n  }\\n\\n  tempUv += vec2(0.5); \\n  return tempUv;\\n}\\n\\nvoid main() {\\n  vec2 correctUv = getUv(vUv, uTextureSize, vSize);\\n  vec4 image = texture(uTexture, correctUv);\\n\\n  gl_FragColor = image;\\n}\";"},"sourceMaps":{"js":{"mappings":[{"name":"module","generated":{"line":1,"column":0},"source":"shaders/fragment.glsl","original":{"line":1,"column":0}},{"generated":{"line":1,"column":6},"source":"shaders/fragment.glsl","original":{"line":1,"column":6}},{"name":"exports","generated":{"line":1,"column":7},"source":"shaders/fragment.glsl","original":{"line":1,"column":7}},{"generated":{"line":1,"column":14},"source":"shaders/fragment.glsl","original":{"line":1,"column":0}},{"generated":{"line":1,"column":17},"source":"shaders/fragment.glsl","original":{"line":1,"column":15}},{"generated":{"line":1,"column":753},"source":"shaders/fragment.glsl","original":{"line":1,"column":0}}],"sources":{"shaders/fragment.glsl":"module.exports=\"#define GLSLIFY 1\\nuniform float time;\\nuniform float uProgress;\\nuniform sampler2D uTexture;\\nuniform vec2 uTextureSize;\\n\\nvarying vec2 vUv;\\nvarying vec2 vSize;\\n\\nvec2 getUv(vec2 uv, vec2 textureSize, vec2 quadSize) {\\n  vec2 tempUv = uv - vec2(0.5);\\n\\n  float quadAspect = quadSize.x / quadSize.y;\\n  float textureAspect = textureSize.x / textureSize.y;\\n\\n  if (quadAspect < textureAspect) {\\n    tempUv = tempUv * vec2(quadAspect / textureAspect, 1.0);\\n  } else {\\n    tempUv = tempUv * vec2(1.0, textureAspect / quadAspect );\\n  }\\n\\n  tempUv += vec2(0.5); \\n  return tempUv;\\n}\\n\\nvoid main() {\\n  vec2 correctUv = getUv(vUv, uTextureSize, vSize);\\n  vec4 image = texture(uTexture, correctUv);\\n\\n  gl_FragColor = image;\\n}\";"},"lineCount":null}},"error":null,"hash":"f485de499af9498377fc0bf72c3ba276","cacheData":{"env":{}}}